<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
					xmlns:local="clr-namespace:Autosoft_Controls_2017;assembly=Autosoft_Controls_2017">

	<!--© 2016 Autosoft Corporation. All rights reserved. Version: 1.07.0201-->

	<!--The background for large controls-->
	<RadialGradientBrush RadiusX="2"
						 x:Key="CrystalBackgroundFill">
		<GradientStop Color="#FFD4C3E8"
					  Offset="0" />
		<GradientStop Color="#FF4B168B"
					  Offset="0.77" />
	</RadialGradientBrush>

	<!--The background for small controls-->
	<SolidColorBrush x:Key="CrystalBackgroundFill2"
					 Color="DodgerBlue" />

	<!--The background for the header and footer-->
	<SolidColorBrush x:Key="HeaderFooterBackground"
					 Color="Purple" />

	<!--The background for popups-->
	<SolidColorBrush x:Key="PopupBackground"
					 Color="{Binding Color, Source={StaticResource HeaderFooterBackground}}" />

	<!--The border for large controls-->
	<LinearGradientBrush EndPoint="0.5,1"
						 StartPoint="0.5,0"
						 x:Key="CrystalBorder">
		<GradientStop Color="#FF661A66"
					  Offset="1" />
		<GradientStop Color="Purple"
					  Offset="0.75" />
		<GradientStop Color="#FFA439A4"
					  Offset="0.5" />
		<GradientStop Color="Purple"
					  Offset="0" />
	</LinearGradientBrush>

	<!--The border for small controls-->
	<SolidColorBrush x:Key="CrystalBorder2"
					 Color="RoyalBlue" />

	<!--The border thickness for large controls-->
	<Thickness x:Key="CrystalBorderThickness"
			   Bottom="6"
			   Left="6"
			   Top="6"
			   Right="6" />

	<!--The border thickness for small controls-->
	<Thickness x:Key="CrystalBorderThickness2"
			   Bottom="1"
			   Left="1"
			   Top="1"
			   Right="1" />

	<!--Set template for crystal advanced buttons. These are advanced, and greatly fade when disabled.-->
	<ControlTemplate TargetType="{x:Type Button}"
					 x:Key="CrystalAdvancedButton">
		<!--Advanced-->
		<Grid ClipToBounds="{TemplateBinding ClipToBounds}">
			<Border x:Name="Background"
					Opacity="0.8"
					BorderBrush="{TemplateBinding BorderBrush}"
					CornerRadius="0"
					BorderThickness="{TemplateBinding BorderThickness}"
					Background="{TemplateBinding Background}" />
			<ContentPresenter RecognizesAccessKey="True"
							  Margin="{TemplateBinding Padding}"
							  x:Name="Content"
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.5" />
						<VisualTransition To="Pressed"
										  GeneratedDuration="0" />
						<VisualTransition From="Pressed"
										  GeneratedDuration="0" />
					</VisualStateGroup.Transitions>
					<VisualState Name="Normal" />
					<VisualState Name="Disabled">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetProperty="Opacity"
											 To="0.3" />
						</Storyboard>
					</VisualState>
					<VisualState Name="MouseOver">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 To="0.925" />
						</Storyboard>
					</VisualState>
					<VisualState Name="Pressed">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 To="1" />
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</Grid>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsFocused"
							   Value="True" />
					<Condition Property="IsKeyboardFocusWithin"
							   Value="True" />
				</MultiTrigger.Conditions>
				<MultiTrigger.EnterActions>
					<BeginStoryboard x:Name="focusedStoryboard">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 From="0.8"
											 To="0.95"
											 AutoReverse="True"
											 RepeatBehavior="Forever">
								<DoubleAnimation.EasingFunction>
									<QuadraticEase EasingMode="EaseInOut" />
								</DoubleAnimation.EasingFunction>
							</DoubleAnimation>
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
					<RemoveStoryboard BeginStoryboardName="focusedStoryboard" />
				</MultiTrigger.ExitActions>
			</MultiTrigger>
			<Trigger Property="IsDefaulted"
					 Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard x:Name="defaultedStoryboard">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 From="0.8"
											 To="0.95"
											 AutoReverse="True"
											 RepeatBehavior="Forever">
								<DoubleAnimation.EasingFunction>
									<QuadraticEase EasingMode="EaseInOut" />
								</DoubleAnimation.EasingFunction>
							</DoubleAnimation>
						</Storyboard>
					</BeginStoryboard>
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<RemoveStoryboard BeginStoryboardName="defaultedStoryboard" />
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--Set template for crystal chrome buttons. These are advanced, and disappear when disabled.-->
	<SolidColorBrush x:Key="ChromeButtonForeground"
					 Color="RoyalBlue" />
	<SolidColorBrush x:Key="ChromeButtonBackground"
					 Color="White" />
	<SolidColorBrush x:Key="CloseChromeButtonForeground"
					 Color="White" />
	<SolidColorBrush x:Key="CloseChromeButtonBackground"
					 Color="DarkRed" />
	<ControlTemplate TargetType="{x:Type Button}"
					 x:Key="CrystalChromeButton">
		<!--Advanced-->
		<Grid ClipToBounds="{TemplateBinding ClipToBounds}">
			<Border x:Name="Background"
					Opacity="0.8"
					BorderBrush="{TemplateBinding BorderBrush}"
					CornerRadius="0"
					BorderThickness="{TemplateBinding BorderThickness}"
					Background="{TemplateBinding Background}" />
			<ContentPresenter RecognizesAccessKey="True"
							  Margin="{TemplateBinding Padding}"
							  x:Name="Content"
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.5" />
						<VisualTransition To="Pressed"
										  GeneratedDuration="0" />
						<VisualTransition From="Pressed"
										  GeneratedDuration="0" />
					</VisualStateGroup.Transitions>
					<VisualState Name="Normal" />
					<VisualState Name="MouseOver">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 To="0.925" />
						</Storyboard>
					</VisualState>
					<VisualState Name="Pressed">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 To="1" />
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup Name="FocusStates">
					<VisualState Name="Unfocused" />
					<VisualState Name="Focused">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 From="0.8"
											 To="0.95"
											 AutoReverse="True"
											 RepeatBehavior="Forever">
								<DoubleAnimation.EasingFunction>
									<QuadraticEase EasingMode="EaseInOut" />
								</DoubleAnimation.EasingFunction>
							</DoubleAnimation>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</Grid>
		<ControlTemplate.Triggers>
			<!--If the button is disabled, it will disappear.-->
			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter Property="Visibility"
						Value="Collapsed" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--Set template for crystal icon buttons. By default, these have a transparent border and background.-->
	<Style TargetType="{x:Type Button}"
		   x:Key="CrystalIconButton">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid Name="MainGrid"
						  ClipToBounds="False">
						<Border Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}">
							<ContentPresenter RecognizesAccessKey="True"
											  Margin="{TemplateBinding Padding}"
											  x:Name="Content"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Border>
						<Ellipse x:Name="AnimationEllipse"
								 HorizontalAlignment="Center"
								 VerticalAlignment="Center"
								 Height="{TemplateBinding ActualHeight}"
								 Width="{TemplateBinding ActualWidth}"
								 Fill="{DynamicResource CrystalBackgroundFill2}"
								 Opacity="0"
								 RenderTransformOrigin="0.5,0.5">
							<Ellipse.RenderTransform>
								<ScaleTransform ScaleX="0.15"
												ScaleY="0.15" />
							</Ellipse.RenderTransform>
							<Ellipse.CacheMode>
								<BitmapCache RenderAtScale="5" />
							</Ellipse.CacheMode>
						</Ellipse>

					</Grid>

					<ControlTemplate.Triggers>

						<!--While the button is pressed, there will be a cool animation.-->
						<Trigger Property="IsPressed"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="Opacity"
														 To="0.4" />
										<DoubleAnimation Duration="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleX"
														 To="1.4" />
										<DoubleAnimation Duration="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleY"
														 To="1.4" />

									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleX"
														 To="2" />
										<DoubleAnimation Duration="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleY"
														 To="2" />
										<DoubleAnimation Duration="0"
														 BeginTime="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="Opacity"
														 To="0" />
										<DoubleAnimation Duration="0"
														 BeginTime="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleX"
														 To="1" />
										<DoubleAnimation Duration="0"
														 BeginTime="0:0:0.25"
														 Storyboard.TargetName="AnimationEllipse"
														 Storyboard.TargetProperty="RenderTransform.ScaleY"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>

						<!--While the mouse hovers over the button, there will be a drop shadow.-->
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter Property="Effect">
								<Setter.Value>
									<DropShadowEffect Color="{TemplateBinding Background}"
													  ShadowDepth="0.2" />
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set template for RepeatButtons-->
	<ControlTemplate TargetType="{x:Type RepeatButton}"
					 x:Key="CrystalRepeatButton">
		<Grid ClipToBounds="{TemplateBinding ClipToBounds}">
			<Border x:Name="Background"
					Opacity="0.8"
					BorderBrush="{TemplateBinding BorderBrush}"
					CornerRadius="0"
					BorderThickness="{TemplateBinding BorderThickness}"
					Background="{TemplateBinding Background}" />
			<ContentPresenter RecognizesAccessKey="True"
							  Margin="{TemplateBinding Padding}"
							  x:Name="Content"
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.5" />
						<VisualTransition To="Pressed"
										  GeneratedDuration="0" />
						<VisualTransition From="Pressed"
										  GeneratedDuration="0" />
					</VisualStateGroup.Transitions>
					<VisualState Name="Normal" />
					<VisualState Name="Disabled">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetProperty="Opacity"
											 To="0.3" />
						</Storyboard>
					</VisualState>
					<VisualState Name="MouseOver">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 To="0.925" />
						</Storyboard>
					</VisualState>
					<VisualState Name="Pressed">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 To="1" />
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</Grid>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsFocused"
							   Value="True" />
					<Condition Property="IsKeyboardFocusWithin"
							   Value="True" />
				</MultiTrigger.Conditions>
				<MultiTrigger.EnterActions>
					<BeginStoryboard x:Name="focusedStoryboard">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="Background"
											 Storyboard.TargetProperty="Opacity"
											 From="0.8"
											 To="0.95"
											 AutoReverse="True"
											 RepeatBehavior="Forever">
								<DoubleAnimation.EasingFunction>
									<QuadraticEase EasingMode="EaseInOut" />
								</DoubleAnimation.EasingFunction>
							</DoubleAnimation>
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
					<RemoveStoryboard BeginStoryboardName="focusedStoryboard" />
				</MultiTrigger.ExitActions>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--Set properties for crystal buttons. These buttons feature a fair amount of padding
	and the advanced template. These settings can be overridden, however.-->
	<Style TargetType="{x:Type Button}">
		<Setter Property="Content"
				Value="Button" />
		<Setter Property="Template"
				Value="{DynamicResource CrystalAdvancedButton}" />
		<Setter Property="Background"
				Value="{DynamicResource CrystalBackgroundFill2}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource CrystalBorder2}" />
		<Setter Property="BorderThickness"
				Value="{DynamicResource CrystalBorderThickness2}" />
		<Setter Property="Margin"
				Value="1" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="Padding"
				Value="10, 3" />
	</Style>

	<!--Set properties for buttons of a finite size. Just like the standard button style, these settings can be overridden.-->
	<Style TargetType="{x:Type Button}"
		   BasedOn="{StaticResource {x:Type Button}}"
		   x:Key="CrystalDialogButton">
		<Setter Property="Width"
				Value="80" />
		<Setter Property="Height"
				Value="22" />
	</Style>

	<!--Set properties for close buttons.-->
	<Style TargetType="{x:Type Button}"
		   BasedOn="{StaticResource {x:Type Button}}"
		   x:Key="CloseButton">
		<Setter Property="Background"
				Value="DarkRed" />
	</Style>

	<!--Set properties for crystal modern bar buttons. These have a flat border on the bottom, and are useful
	 when one wants to dock the buttons on the edge.-->
	<Style TargetType="{x:Type Button}"
		   x:Key="CrystalModernBarButton"
		   BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="BorderBrush"
				Value="{StaticResource CrystalBorder2}" />
		<Setter Property="BorderThickness"
				Value="{DynamicResource CrystalBorderThickness2}" />
		<Setter Property="Width"
				Value="Auto" />
		<Setter Property="Background"
				Value="{StaticResource CrystalBackgroundFill2}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<!--Basic-->
					<Grid ClipToBounds="{TemplateBinding ClipToBounds}">
						<Grid.RowDefinitions>

							<RowDefinition Height="Auto"
										   x:Name="TopBarRowDefinition" />
							<RowDefinition x:Name="MainRowDefinition" />
							<RowDefinition Height="Auto"
										   x:Name="BottomBarRowDefinition" />
						</Grid.RowDefinitions>
						<ContentPresenter RecognizesAccessKey="True"
										  Grid.Row="1"
										  Margin="{TemplateBinding Padding}"
										  x:Name="Content"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						<Border x:Name="Background"
								Height="8"
								Grid.Row="0"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}" />
					</Grid>
					<ControlTemplate.Triggers>
						<!--If the button is disabled, it will disappear-->
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="Visibility"
									Value="Collapsed" />
						</Trigger>

						<!--While the button is pressed, it's size will be reduced, in addition to a beautiful drop shadow.-->
						<Trigger Property="IsPressed"
								 Value="True">
							<Setter Property="Effect">
								<Setter.Value>
									<DropShadowEffect Color="{TemplateBinding Background}"
													  ShadowDepth="0.5" />
								</Setter.Value>
							</Setter>
							<Setter Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX=".95"
													ScaleY=".95" />
								</Setter.Value>
							</Setter>
						</Trigger>

						<!--While the mouse hovers over the button, the background will slowly fade.-->
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard x:Name="HoverStoryboard">
									<Storyboard Storyboard.TargetName="Background"
												Storyboard.TargetProperty="Opacity">
										<DoubleAnimation From="1"
														 To="0.4"
														 Duration="0:0:0.5" />
									</Storyboard>
								</BeginStoryboard>

							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard x:Name="RemoveHoverStoryboard">
									<Storyboard Storyboard.TargetName="Background"
												Storyboard.TargetProperty="Opacity">
										<DoubleAnimation From="0.4"
														 To="1"
														 Duration="0:0:0.5" />
									</Storyboard>
								</BeginStoryboard>

							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for CalendarButtons-->
	<Style TargetType="{x:Type CalendarButton}"
		   x:Key="CrystalCButton">
		<Setter Property="MinWidth"
				Value="40" />
		<Setter Property="MinHeight"
				Value="50" />
		<Setter Property="FontSize"
				Value="10" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="BorderBrush"
				Value="{StaticResource CrystalBorder}" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderThickness"
				Value="1,1,1,1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CalendarButton}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To=".5"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="Background" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To=".5"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="Background" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unselected" />
								<VisualState x:Name="Selected">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To=".75"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="SelectedBackground" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ActiveStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Active" />
								<VisualState x:Name="Inactive">
									<Storyboard>
										<ColorAnimation Duration="0"
														To="LightGray"
														Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
														Storyboard.TargetName="NormalText" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CalendarButtonFocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="CalendarButtonFocused">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Duration="0"
																	   Storyboard.TargetProperty="Visibility"
																	   Storyboard.TargetName="CalendarButtonFocusVisual">
											<DiscreteObjectKeyFrame KeyTime="0">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Visible</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="CalendarButtonUnfocused">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Duration="0"
																	   Storyboard.TargetProperty="Visibility"
																	   Storyboard.TargetName="CalendarButtonFocusVisual">
											<DiscreteObjectKeyFrame KeyTime="0">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Collapsed</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}" />
						<Rectangle x:Name="SelectedBackground"
								   Fill="{StaticResource CrystalBackgroundFill2}"
								   Stroke="{StaticResource CrystalBorder2}"
								   StrokeThickness="1"
								   Opacity="0" />
						<Rectangle x:Name="Background"
								   Fill="{StaticResource CrystalBorder}"
								   Opacity="0" />
						<ContentPresenter x:Name="NormalText"
										  TextElement.Foreground="White"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="1,0,1,1"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						<Rectangle x:Name="CalendarButtonFocusVisual"
								   IsHitTestVisible="false"
								   Stroke="#FF45D6FA"
								   Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused"
								 Value="True">
							<Setter Property="Visibility"
									TargetName="CalendarButtonFocusVisual"
									Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for CalendarDayButtons-->
	<SolidColorBrush x:Key="NormalBrush"
					 Color="White" />
	<Style TargetType="{x:Type CalendarDayButton}"
		   x:Key="CrystalCDayButton">
		<Setter Property="MinWidth"
				Value="20" />
		<Setter Property="MinHeight"
				Value="20" />
		<Setter Property="FontSize"
				Value="10" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="BorderBrush"
				Value="{StaticResource CrystalBorder}" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderThickness"
				Value="1,1,1,1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CalendarDayButton}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To="0.5"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="HighlightBackground" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To="0.5"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="HighlightBackground" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To="0"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="HighlightBackground" />
										<DoubleAnimation Duration="0"
														 To=".35"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="NormalText" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unselected" />
								<VisualState x:Name="Selected">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To=".75"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="SelectedBackground" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CalendarButtonFocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="CalendarButtonFocused">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Duration="0"
																	   Storyboard.TargetProperty="Visibility"
																	   Storyboard.TargetName="DayButtonFocusVisual">
											<DiscreteObjectKeyFrame KeyTime="0">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Visible</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="CalendarButtonUnfocused">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Duration="0"
																	   Storyboard.TargetProperty="Visibility"
																	   Storyboard.TargetName="DayButtonFocusVisual">
											<DiscreteObjectKeyFrame KeyTime="0">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Collapsed</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ActiveStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Active" />
								<VisualState x:Name="Inactive">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To="1"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="InactiveBackground" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="DayStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="RegularDay" />
								<VisualState x:Name="Today">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To="1"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="TodayBackground" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="BlackoutDayStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="NormalDay" />
								<VisualState x:Name="BlackoutDay">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To=".2"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="Blackout" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Path x:Name="TodayBackground"
							  Panel.ZIndex="1"
							  HorizontalAlignment="Right"
							  StrokeThickness="1"
							  Fill="{StaticResource NormalBrush}"
							  Opacity="0"
							  Data="M 0,0 L 8,8 L 8,0 z" />
						<Rectangle x:Name="SelectedBackground"
								   Fill="{StaticResource CrystalBackgroundFill2}"
								   Stroke="{StaticResource CrystalBorder2}"
								   StrokeThickness="1"
								   Opacity="0" />
						<Border Name="Background"
								Panel.ZIndex="2"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}" />
						<Rectangle x:Name="HighlightBackground"
								   Fill="{StaticResource CrystalBorder}"
								   Opacity="0" />
						<Rectangle x:Name="InactiveBackground"
								   Fill="#FFACACAC"
								   Margin="1"
								   Opacity="0" />
						<ContentPresenter x:Name="NormalText"
										  TextElement.Foreground="White"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="5"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						<Path x:Name="Blackout"
							  Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z"
							  Fill="#FF000000"
							  HorizontalAlignment="Stretch"
							  Margin="3"
							  Opacity="0"
							  RenderTransformOrigin="0.5,0.5"
							  Stretch="Fill"
							  VerticalAlignment="Stretch" />
						<Rectangle x:Name="DayButtonFocusVisual"
								   IsHitTestVisible="false"
								   Stroke="#FF45D6FA"
								   Visibility="Collapsed" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for Calendar Items-->
	<Color x:Key="HoverCBrush"
		   A="255"
		   B="30"
		   G="144"
		   R="255" />
	<Color x:Key="NormalCBrush"
		   A="255"
		   B="255"
		   G="255"
		   R="255" />
	<Style TargetType="{x:Type CalendarItem}"
		   x:Key="CrystalCalendarItem">
		<Setter Property="Margin"
				Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CalendarItem}">
					<ControlTemplate.Resources>
						<DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
							<TextBlock Foreground="White"
									   FontSize="9.5"
									   FontFamily="Calibri"
									   HorizontalAlignment="Center"
									   Margin="0,0,0,5"
									   Text="{Binding}"
									   VerticalAlignment="Center" />
						</DataTemplate>
					</ControlTemplate.Resources>
					<Grid x:Name="PART_Root">
						<Grid.Resources>
							<SolidColorBrush x:Key="DisabledColor"
											 Color="#A5FFFFFF" />
						</Grid.Resources>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To="1"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="PART_DisabledVisual" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}">
							<Grid>
								<Grid.Resources>
									<ControlTemplate x:Key="PreviousButtonTemplate"
													 TargetType="{x:Type Button}">
										<Grid>
											<VisualStateManager.VisualStateGroups>
												<VisualStateGroup x:Name="CommonStates">
													<VisualState x:Name="Normal">
														<Storyboard>
															<ColorAnimation Duration="0:0:0.5"
																			To="{StaticResource NormalCBrush}"
																			Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
																			Storyboard.TargetName="path" />
														</Storyboard>
													</VisualState>
													<VisualState x:Name="MouseOver">
														<Storyboard>
															<ColorAnimation Duration="0:0:0.5"
																			To="{StaticResource HoverCBrush}"
																			Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
																			Storyboard.TargetName="path" />
														</Storyboard>
													</VisualState>
													<VisualState x:Name="Disabled">
														<Storyboard>
															<DoubleAnimation Duration="0"
																			 To=".5"
																			 Storyboard.TargetProperty="(Shape.Stroke).(Brush.Opacity)"
																			 Storyboard.TargetName="path" />
														</Storyboard>
													</VisualState>
												</VisualStateGroup>
											</VisualStateManager.VisualStateGroups>
											<Grid>
												<Path x:Name="path"
													  Data="M 0,4 L 6,0 l 6,4"
													  Stroke="{StaticResource NormalBrush}"
													  Height="Auto"
													  Stretch="Uniform"
													  Width="Auto"
													  Fill="#00000000" />
											</Grid>
										</Grid>
									</ControlTemplate>
									<ControlTemplate x:Key="NextButtonTemplate"
													 TargetType="{x:Type Button}">
										<Grid>
											<VisualStateManager.VisualStateGroups>
												<VisualStateGroup x:Name="CommonStates">
													<VisualState x:Name="Normal">
														<Storyboard>
															<ColorAnimation Duration="0:0:0.5"
																			To="{StaticResource NormalCBrush}"
																			Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
																			Storyboard.TargetName="path" />
														</Storyboard>
													</VisualState>
													<VisualState x:Name="MouseOver">
														<Storyboard>
															<ColorAnimation Duration="0:0:0.5"
																			To="{StaticResource HoverCBrush}"
																			Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
																			Storyboard.TargetName="path" />
														</Storyboard>
													</VisualState>
													<VisualState x:Name="Disabled">
														<Storyboard>
															<DoubleAnimation Duration="0"
																			 To=".5"
																			 Storyboard.TargetProperty="(Shape.Stroke).(Brush.Opacity)"
																			 Storyboard.TargetName="path" />
														</Storyboard>
													</VisualState>
												</VisualStateGroup>
											</VisualStateManager.VisualStateGroups>
											<Grid>
												<Path x:Name="path"
													  Data="M 0,4 L 6,0 l 6,4"
													  Stroke="{StaticResource NormalBrush}"
													  Height="Auto"
													  Stretch="Uniform"
													  Width="Auto"
													  Fill="#00000000">
													<Path.LayoutTransform>
														<RotateTransform Angle="180" />
													</Path.LayoutTransform>
												</Path>
											</Grid>
										</Grid>
									</ControlTemplate>
									<ControlTemplate x:Key="HeaderButtonTemplate"
													 TargetType="{x:Type Button}">
										<Grid>
											<VisualStateManager.VisualStateGroups>
												<VisualStateGroup x:Name="CommonStates">
													<VisualState x:Name="Normal">
														<Storyboard>
															<ColorAnimation Duration="0:0:0.5"
																			To="{StaticResource NormalCBrush}"
																			Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
																			Storyboard.TargetName="buttonContent" />
														</Storyboard>
													</VisualState>
													<VisualState x:Name="MouseOver">
														<Storyboard>
															<ColorAnimation Duration="0:0:0.5"
																			To="{StaticResource HoverCBrush}"
																			Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
																			Storyboard.TargetName="buttonContent" />
														</Storyboard>
													</VisualState>
													<VisualState x:Name="Disabled">
														<Storyboard>
															<DoubleAnimation Duration="0"
																			 To=".5"
																			 Storyboard.TargetProperty="Opacity"
																			 Storyboard.TargetName="buttonContent" />
														</Storyboard>
													</VisualState>
												</VisualStateGroup>
											</VisualStateManager.VisualStateGroups>
											<ContentPresenter x:Name="buttonContent"
															  ContentTemplate="{TemplateBinding ContentTemplate}"
															  Content="{TemplateBinding Content}"
															  TextElement.Foreground="{StaticResource NormalBrush}"
															  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
															  Margin="1,4,1,9"
															  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
										</Grid>
									</ControlTemplate>
								</Grid.Resources>
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition Height="*" />
								</Grid.RowDefinitions>
								<Button x:Name="PART_HeaderButton"
										Focusable="False"
										FontFamily="Segoe UI"
										FontSize="10.5"
										Margin="10,0,0,0"
										Grid.Row="0"
										HorizontalAlignment="Left"
										Template="{StaticResource HeaderButtonTemplate}"
										VerticalAlignment="Center" />
								<Button x:Name="PART_PreviousButton"
										Grid.Column="1"
										Focusable="False"
										ToolTip="Previous"
										Height="10"
										Grid.Row="0"
										Template="{StaticResource PreviousButtonTemplate}"
										Width="15" />
								<Button x:Name="PART_NextButton"
										Grid.Column="2"
										Margin="0,0,5,0"
										ToolTip="Next"
										Focusable="False"
										Height="10"
										Grid.Row="0"
										Template="{StaticResource NextButtonTemplate}"
										Width="15" />
								<Grid x:Name="PART_MonthView"
									  Grid.ColumnSpan="3"
									  HorizontalAlignment="Center"
									  Margin="0,0,0,5"
									  Grid.Row="1"
									  Visibility="Visible">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>
								</Grid>
								<Grid x:Name="PART_YearView"
									  Grid.ColumnSpan="3"
									  HorizontalAlignment="Center"
									  Margin="0,0,0,5"
									  Grid.Row="1"
									  Visibility="Hidden">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>
								</Grid>
							</Grid>
						</Border>
						<Rectangle x:Name="PART_DisabledVisual"
								   Fill="{StaticResource DisabledColor}"
								   Opacity="0"
								   Stretch="Fill"
								   Stroke="{StaticResource DisabledColor}"
								   StrokeThickness="1"
								   Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="Visibility"
									TargetName="PART_DisabledVisual"
									Value="Visible" />
						</Trigger>
						<DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}"
									 Value="Month">
							<Setter Property="ToolTip"
									TargetName="PART_HeaderButton"
									Value="View current year" />
						</DataTrigger>
						<DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}"
									 Value="Year">
							<Setter Property="Visibility"
									TargetName="PART_MonthView"
									Value="Hidden" />
							<Setter Property="Visibility"
									TargetName="PART_YearView"
									Value="Visible" />
							<Setter Property="ToolTip"
									TargetName="PART_HeaderButton"
									Value="View current decade" />
						</DataTrigger>
						<DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}"
									 Value="Decade">
							<Setter Property="Visibility"
									TargetName="PART_MonthView"
									Value="Hidden" />
							<Setter Property="Visibility"
									TargetName="PART_YearView"
									Value="Visible" />
							<Setter Property="ToolTip"
									TargetName="PART_HeaderButton"
									Value="" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for Calendars-->
	<Style TargetType="{x:Type Calendar}"
		   x:Key="CalendarStyle">
		<Setter Property="Foreground"
				Value="#FF333333" />
		<Setter Property="CalendarItemStyle"
				Value="{DynamicResource CrystalCalendarItem}" />
		<Setter Property="CalendarDayButtonStyle"
				Value="{DynamicResource CrystalCDayButton}" />
		<Setter Property="CalendarButtonStyle"
				Value="{DynamicResource CrystalCButton}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource CrystalBorder}" />
		<Setter Property="Background"
				Value="{StaticResource CrystalBackgroundFill}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Calendar}">
					<StackPanel x:Name="PART_Root"
								HorizontalAlignment="Center">
						<CalendarItem x:Name="PART_CalendarItem"
									  BorderBrush="{TemplateBinding BorderBrush}"
									  BorderThickness="{TemplateBinding BorderThickness}"
									  Background="{TemplateBinding Background}"
									  Style="{TemplateBinding CalendarItemStyle}" />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for CheckBoxes-->
	<Style x:Key="FocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2"
							   SnapsToDevicePixels="true"
							   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
							   StrokeThickness="1"
							   StrokeDashArray="1 2" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="OptionMarkFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="14,0,0,0"
							   SnapsToDevicePixels="true"
							   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
							   StrokeThickness="1"
							   StrokeDashArray="1 2" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="OptionMark.Static.Background"
					 Color="#FFFFFFFF" />
	<SolidColorBrush x:Key="OptionMark.Static.Border"
					 Color="DodgerBlue" />
	<SolidColorBrush x:Key="OptionMark.Static.Glyph"
					 Color="#FF212121" />
	<SolidColorBrush x:Key="OptionMark.MouseOver.Background"
					 Color="#FFF3F9FF" />
	<SolidColorBrush x:Key="OptionMark.MouseOver.Border"
					 Color="#FF5593FF" />
	<SolidColorBrush x:Key="OptionMark.MouseOver.Glyph"
					 Color="#FF212121" />
	<SolidColorBrush x:Key="OptionMark.Pressed.Background"
					 Color="#FFD9ECFF" />
	<SolidColorBrush x:Key="OptionMark.Pressed.Border"
					 Color="#FF3C77DD" />
	<SolidColorBrush x:Key="OptionMark.Pressed.Glyph"
					 Color="#FF212121" />
	<SolidColorBrush x:Key="OptionMark.Disabled.Background"
					 Color="#FFE6E6E6" />
	<SolidColorBrush x:Key="OptionMark.Disabled.Border"
					 Color="#FFBCBCBC" />
	<SolidColorBrush x:Key="OptionMark.Disabled.Glyph"
					 Color="#FF707070" />
	<Style TargetType="{x:Type CheckBox}">
		<Setter Property="Margin"
				Value="1" />
		<Setter Property="FocusVisualStyle"
				Value="{StaticResource FocusVisual}" />
		<Setter Property="Background"
				Value="{StaticResource OptionMark.Static.Background}" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="BorderBrush"
				Value="{StaticResource OptionMark.Static.Border}" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid x:Name="templateRoot"
						  SnapsToDevicePixels="True"
						  Background="Transparent">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border x:Name="checkBoxBorder"
								Margin="1"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}">
							<Grid x:Name="markGrid">
								<Path x:Name="optionMark"
									  Opacity="0"
									  Stretch="None"
									  Margin="1"
									  Fill="{StaticResource OptionMark.Static.Glyph}"
									  Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " />
								<Rectangle x:Name="indeterminateMark"
										   Margin="2"
										   Opacity="0"
										   Fill="{StaticResource OptionMark.Static.Glyph}" />
							</Grid>
						</Border>
						<ContentPresenter x:Name="contentPresenter"
										  RecognizesAccessKey="True"
										  Grid.Column="1"
										  Margin="{TemplateBinding Padding}"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  Focusable="False" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent"
								 Value="true">
							<Setter Property="FocusVisualStyle"
									Value="{StaticResource OptionMarkFocusVisual}" />
							<Setter Property="Padding"
									Value="4,-1,0,0" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter Property="Background"
									Value="{StaticResource OptionMark.MouseOver.Background}"
									TargetName="checkBoxBorder" />
							<Setter Property="BorderBrush"
									Value="{StaticResource OptionMark.MouseOver.Border}"
									TargetName="checkBoxBorder" />
							<Setter Property="Fill"
									Value="{StaticResource OptionMark.MouseOver.Glyph}"
									TargetName="optionMark" />
							<Setter Property="Fill"
									Value="{StaticResource OptionMark.MouseOver.Glyph}"
									TargetName="indeterminateMark" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Background"
									Value="{StaticResource OptionMark.Disabled.Background}"
									TargetName="checkBoxBorder" />
							<Setter Property="BorderBrush"
									Value="{StaticResource OptionMark.Disabled.Border}"
									TargetName="checkBoxBorder" />
							<Setter Property="Fill"
									Value="{StaticResource OptionMark.Disabled.Glyph}"
									TargetName="optionMark" />
							<Setter Property="Fill"
									Value="{StaticResource OptionMark.Disabled.Glyph}"
									TargetName="indeterminateMark" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Background"
									Value="{StaticResource OptionMark.Pressed.Background}"
									TargetName="checkBoxBorder" />
							<Setter Property="BorderBrush"
									Value="{StaticResource OptionMark.Pressed.Border}"
									TargetName="checkBoxBorder" />
							<Setter Property="Fill"
									Value="{StaticResource OptionMark.Pressed.Glyph}"
									TargetName="optionMark" />
							<Setter Property="Fill"
									Value="{StaticResource OptionMark.Pressed.Glyph}"
									TargetName="indeterminateMark" />
						</Trigger>
						<Trigger Property="IsChecked"
								 Value="true">
							<Setter Property="Opacity"
									Value="1"
									TargetName="optionMark" />
							<Setter Property="Opacity"
									Value="0"
									TargetName="indeterminateMark" />
						</Trigger>
						<Trigger Property="IsChecked"
								 Value="{x:Null}">
							<Setter Property="Opacity"
									Value="0"
									TargetName="optionMark" />
							<Setter Property="Opacity"
									Value="1"
									TargetName="indeterminateMark" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for ComboBoxItems-->
	<Style TargetType="{x:Type ComboBoxItem}">
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="Background"
				Value="Purple" />
		<Setter Property="BorderBrush"
				Value="DarkViolet" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Padding"
				Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Grid ClipToBounds="{TemplateBinding ClipToBounds}"
						  MinHeight="15">
						<Border x:Name="Background"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}" />
						<ContentPresenter RecognizesAccessKey="True"
										  Margin="{TemplateBinding Padding}"
										  x:Name="Content"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>

			<!--Produce a nice hover animation and effect when hovering over an item.-->
			<Trigger Property="IsMouseOver"
					 Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetProperty="Opacity"
											 From="1"
											 To="0.6"
											 Duration="0:0:0.5" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetProperty="Opacity"
											 From="0.6"
											 To="1"
											 Duration="0:0:0.5" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.ExitActions>
			</Trigger>

			<!--When an item is selected, make it purple.-->
			<Trigger Property="IsSelected"
					 Value="True">
				<Setter Property="Background"
						Value="DarkViolet" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--Set properties for ComboBoxes-->
	<Style TargetType="{x:Type ComboBox}">
		<Setter Property="Margin"
				Value="1" />
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Margin="2,2,12,2"
										   SnapsToDevicePixels="True"
										   Stroke="White"
										   StrokeThickness="2"
										   StrokeDashArray="1 2"
										   Fill="Transparent" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Background"
				Value="{StaticResource CrystalBackgroundFill2}" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource CrystalBorder2}" />
		<Setter Property="BorderThickness"
				Value="{DynamicResource CrystalBorderThickness2}" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="Padding"
				Value="4,3" />
		<Setter Property="ScrollViewer.CanContentScroll"
				Value="True" />
		<Setter Property="ScrollViewer.PanningMode"
				Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid x:Name="MainGrid"
						  SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
											  Width="0" />
						</Grid.ColumnDefinitions>
						<Popup x:Name="PART_Popup"
							   AllowsTransparency="True"
							   Grid.ColumnSpan="2"
							   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							   Margin="1"
							   PopupAnimation="Slide"
							   Placement="Bottom">
							<Themes:SystemDropShadowChrome x:Name="Shdw"
														   Color="Gray"
														   MaxHeight="{TemplateBinding MaxDropDownHeight}"
														   MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
								<Border x:Name="DropDownBorder"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="1"
										Background="{TemplateBinding Background}">
									<ScrollViewer x:Name="DropDownScrollViewer">
										<Grid RenderOptions.ClearTypeHint="Enabled">
											<Canvas HorizontalAlignment="Left"
													Height="0"
													VerticalAlignment="Top"
													Width="0">
												<Rectangle x:Name="OpaqueRect"
														   Fill="{Binding Background, ElementName=DropDownBorder}"
														   Height="{Binding ActualHeight, ElementName=DropDownBorder}"
														   Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
											</Canvas>
											<ItemsPresenter x:Name="ItemsPresenter"
															KeyboardNavigation.DirectionalNavigation="Contained"
															SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
										</Grid>
									</ScrollViewer>
								</Border>
							</Themes:SystemDropShadowChrome>
						</Popup>
						<ToggleButton BorderBrush="{TemplateBinding BorderBrush}"
									  BorderThickness="{TemplateBinding BorderThickness}"
									  Background="{TemplateBinding Background}"
									  Grid.ColumnSpan="2"
									  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
							<ToggleButton.Style>
								<Style TargetType="{x:Type ToggleButton}">
									<Setter Property="OverridesDefaultStyle"
											Value="True" />
									<Setter Property="IsTabStop"
											Value="False" />
									<Setter Property="Focusable"
											Value="False" />
									<Setter Property="ClickMode"
											Value="Press" />
									<Setter Property="Background"
											Value="Transparent" />
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate TargetType="{x:Type ToggleButton}">
												<Border x:Name="Chrome"
														Opacity="0.8"
														BorderThickness="{TemplateBinding BorderThickness}"
														BorderBrush="{TemplateBinding BorderBrush}"
														Background="{TemplateBinding Background}"
														SnapsToDevicePixels="True">
													<Grid HorizontalAlignment="Right"
														  Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
														<Path x:Name="Arrow"
															  Data="M0,0L3.5,4 7,0z"
															  Fill="{TemplateBinding Foreground}"
															  HorizontalAlignment="Center"
															  Margin="3,1,0,0"
															  VerticalAlignment="Center" />
													</Grid>
													<VisualStateManager.VisualStateGroups>
														<VisualStateGroup Name="CommonStates">
															<VisualStateGroup.Transitions>
																<VisualTransition GeneratedDuration="0:0:0.5" />
															</VisualStateGroup.Transitions>
															<VisualState Name="Normal" />
															<VisualState Name="Disabled">
																<Storyboard>
																	<DoubleAnimation Storyboard.TargetProperty="Opacity"
																					 To="0.3" />
																	<ColorAnimation Storyboard.TargetName="Arrow"
																					Storyboard.TargetProperty="Fill"
																					To="#FFAFAFAF" />
																</Storyboard>
															</VisualState>
															<VisualState Name="MouseOver">
																<Storyboard>
																	<DoubleAnimation Storyboard.TargetName="Chrome"
																					 Storyboard.TargetProperty="Opacity"
																					 To="0.925" />
																	<DoubleAnimation Storyboard.TargetName="Arrow"
																					 Storyboard.TargetProperty="Opacity"
																					 To="0.5" />
																</Storyboard>
															</VisualState>
														</VisualStateGroup>
														<VisualStateGroup Name="FocusStates">
															<VisualState Name="Unfocused" />
															<VisualState Name="Focused">
																<Storyboard>
																	<DoubleAnimation Storyboard.TargetName="Chrome"
																					 Storyboard.TargetProperty="Opacity"
																					 From="0.8"
																					 To="0.95"
																					 AutoReverse="True"
																					 RepeatBehavior="Forever">
																		<DoubleAnimation.EasingFunction>
																			<QuadraticEase EasingMode="EaseInOut" />
																		</DoubleAnimation.EasingFunction>
																	</DoubleAnimation>
																</Storyboard>
															</VisualState>
														</VisualStateGroup>
													</VisualStateManager.VisualStateGroups>
												</Border>
												<ControlTemplate.Triggers>
													<Trigger Property="IsChecked"
															 Value="True">
														<Setter Property="Effect"
																TargetName="Arrow">
															<Setter.Value>
																<BlurEffect />
															</Setter.Value>
														</Setter>
													</Trigger>
												</ControlTemplate.Triggers>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
								</Style>
							</ToggleButton.Style>

						</ToggleButton>
						<ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
										  Content="{TemplateBinding SelectionBoxItem}"
										  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  IsHitTestVisible="False"
										  Margin="{TemplateBinding Padding}"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasItems"
								 Value="False">
							<Setter Property="Height"
									TargetName="DropDownBorder"
									Value="95" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="Foreground"
									Value="Gray" />
							<Setter Property="Opacity"
									Value="0.3" />
						</Trigger>
						<Trigger Property="HasDropShadow"
								 SourceName="PART_Popup"
								 Value="True">
							<Setter Property="Margin"
									TargetName="Shdw"
									Value="0,0,5,5" />
							<Setter Property="Color"
									TargetName="Shdw"
									Value="#71000000" />
						</Trigger>
						<Trigger Property="CanContentScroll"
								 SourceName="DropDownScrollViewer"
								 Value="False">
							<Setter Property="Canvas.Top"
									TargetName="OpaqueRect"
									Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
							<Setter Property="Canvas.Left"
									TargetName="OpaqueRect"
									Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEditable"
					 Value="True">
				<Setter Property="Background"
						Value="{DynamicResource CrystalBackgroundFill2}" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource CrystalBorder2}" />
				<Setter Property="BorderThickness"
						Value="{DynamicResource CrystalBorderThickness2}" />
				<Setter Property="IsTabStop"
						Value="False" />
				<Setter Property="Padding"
						Value="3" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ComboBox}">
							<Grid x:Name="Placement"
								  SnapsToDevicePixels="True">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<Popup x:Name="PART_Popup"
									   AllowsTransparency="True"
									   Grid.ColumnSpan="2"
									   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
									   PopupAnimation="Slide"
									   Placement="Bottom">
									<Themes:SystemDropShadowChrome x:Name="Shdw"
																   Color="Transparent"
																   MaxHeight="{TemplateBinding MaxDropDownHeight}"
																   MinWidth="{Binding ActualWidth, ElementName=Placement}">
										<Border x:Name="DropDownBorder"
												BorderBrush="{TemplateBinding BorderBrush}"
												BorderThickness="1"
												Background="{TemplateBinding Background}">
											<ScrollViewer x:Name="DropDownScrollViewer">
												<Grid RenderOptions.ClearTypeHint="Enabled">
													<Canvas HorizontalAlignment="Left"
															Height="0"
															VerticalAlignment="Top"
															Width="0">
														<Rectangle x:Name="OpaqueRect"
																   Fill="{Binding Background, ElementName=DropDownBorder}"
																   Height="{Binding ActualHeight, ElementName=DropDownBorder}"
																   Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
													</Canvas>
													<ItemsPresenter x:Name="ItemsPresenter"
																	KeyboardNavigation.DirectionalNavigation="Contained"
																	SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
												</Grid>
											</ScrollViewer>
										</Border>
									</Themes:SystemDropShadowChrome>
								</Popup>
								<Border x:Name="Border"
										Opacity="0.8"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}"
										Background="{TemplateBinding Background}"
										Grid.ColumnSpan="2" />
								<TextBox x:Name="PART_EditableTextBox"
										 CaretBrush="{TemplateBinding Foreground}"
										 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
										 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
										 Margin="{TemplateBinding Padding}"
										 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
									<TextBox.Style>
										<Style TargetType="{x:Type TextBox}">
											<Setter Property="OverridesDefaultStyle"
													Value="True" />
											<Setter Property="AllowDrop"
													Value="True" />
											<Setter Property="MinWidth"
													Value="0" />
											<Setter Property="MinHeight"
													Value="0" />
											<Setter Property="FocusVisualStyle"
													Value="{x:Null}" />
											<Setter Property="ScrollViewer.PanningMode"
													Value="VerticalFirst" />
											<Setter Property="Stylus.IsFlicksEnabled"
													Value="False" />
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type TextBox}">
														<ScrollViewer x:Name="PART_ContentHost"
																	  Background="Transparent"
																	  Focusable="False"
																	  HorizontalScrollBarVisibility="Hidden"
																	  VerticalScrollBarVisibility="Hidden">
															<VisualStateManager.VisualStateGroups>
																<VisualStateGroup Name="CommonStates">
																	<VisualStateGroup.Transitions>
																		<VisualTransition GeneratedDuration="0:0:0.5" />
																	</VisualStateGroup.Transitions>
																	<VisualState Name="Normal" />
																	<VisualState Name="MouseOver">
																		<Storyboard>
																			<DoubleAnimation Storyboard.TargetProperty="Opacity"
																							 Storyboard.TargetName="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}}"
																							 To="0.925" />
																		</Storyboard>
																	</VisualState>
																</VisualStateGroup>
															</VisualStateManager.VisualStateGroups>
														</ScrollViewer>
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</TextBox.Style>
								</TextBox>
								<ToggleButton Grid.Column="1"
											  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
									<ToggleButton.Style>
										<Style TargetType="{x:Type ToggleButton}">
											<Setter Property="OverridesDefaultStyle"
													Value="True" />
											<Setter Property="IsTabStop"
													Value="False" />
											<Setter Property="Focusable"
													Value="False" />
											<Setter Property="ClickMode"
													Value="Press" />
											<Setter Property="Background"
													Value="Transparent" />
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type ToggleButton}">
														<Border x:Name="Chrome"
																BorderBrush="{TemplateBinding BorderBrush}"
																Background="{TemplateBinding Background}"
																SnapsToDevicePixels="True"
																Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
															<VisualStateManager.VisualStateGroups>
																<VisualStateGroup Name="CommonStates">
																	<VisualStateGroup.Transitions>
																		<VisualTransition GeneratedDuration="0:0:0.5" />
																	</VisualStateGroup.Transitions>
																	<VisualState Name="Normal" />
																	<VisualState Name="Disabled">
																		<Storyboard>
																			<DoubleAnimation Storyboard.TargetProperty="Opacity"
																							 To="0.3" />
																			<ColorAnimation Storyboard.TargetName="Arrow"
																							Storyboard.TargetProperty="Fill"
																							To="#FFAFAFAF" />
																		</Storyboard>
																	</VisualState>
																	<VisualState Name="MouseOver">
																		<Storyboard>
																			<DoubleAnimation Storyboard.TargetName="Arrow"
																							 Storyboard.TargetProperty="Opacity"
																							 To="0.5" />
																		</Storyboard>
																	</VisualState>

																</VisualStateGroup>
																<VisualStateGroup Name="FocusStates">
																	<VisualState Name="Unfocused" />
																	<VisualState Name="Focused">
																		<Storyboard>
																			<DoubleAnimation Storyboard.TargetName="Chrome"
																							 Storyboard.TargetProperty="Opacity"
																							 From="0.8"
																							 To="0.95"
																							 AutoReverse="True"
																							 RepeatBehavior="Forever">
																				<DoubleAnimation.EasingFunction>
																					<QuadraticEase EasingMode="EaseInOut" />
																				</DoubleAnimation.EasingFunction>
																			</DoubleAnimation>
																		</Storyboard>
																	</VisualState>
																</VisualStateGroup>
															</VisualStateManager.VisualStateGroups>
															<Path x:Name="Arrow"
																  Data="M0,0L3.5,4 7,0z"
																  Fill="{TemplateBinding Foreground}"
																  HorizontalAlignment="Center"
																  Margin="0,1,0,0"
																  VerticalAlignment="Center" />
														</Border>
														<ControlTemplate.Triggers>
															<Trigger Property="IsChecked"
																	 Value="True">
																<Setter Property="Effect"
																		TargetName="Arrow">
																	<Setter.Value>
																		<BlurEffect />
																	</Setter.Value>
																</Setter>
															</Trigger>
														</ControlTemplate.Triggers>
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</ToggleButton.Style>
								</ToggleButton>
							</Grid>
							<ControlTemplate.Triggers>

								<Trigger Property="HasItems"
										 Value="False">
									<Setter Property="Height"
											TargetName="DropDownBorder"
											Value="95" />
								</Trigger>
								<Trigger Property="IsEnabled"
										 Value="False">
									<Setter Property="Foreground"
											Value="Gray" />
									<Setter Property="Opacity"
											Value="0.3" />
								</Trigger>
								<Trigger Property="HasDropShadow"
										 SourceName="PART_Popup"
										 Value="True">
									<Setter Property="Margin"
											TargetName="Shdw"
											Value="0,0,5,5" />
									<Setter Property="Color"
											TargetName="Shdw"
											Value="#71000000" />
								</Trigger>
								<Trigger Property="CanContentScroll"
										 SourceName="DropDownScrollViewer"
										 Value="False">
									<Setter Property="Canvas.Top"
											TargetName="OpaqueRect"
											Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
									<Setter Property="Canvas.Left"
											TargetName="OpaqueRect"
											Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--Set properties for ComboBoxes-->
	<Style TargetType="{x:Type ComboBox}"
		   BasedOn="{StaticResource {x:Type ComboBox}}"
		   x:Key="DataColumnComboBoxStyle">
		<Setter Property="Background"
				Value="DarkViolet" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="BorderBrush"
				Value="DarkViolet" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Padding"
				Value="4,0" />
	</Style>

	<!--Set properties for DataGridCells-->
	<SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}"
					 Color="#FF000000" />
	<Style TargetType="{x:Type DataGridCell}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridCell}">
					<Border BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="True">
						<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsKeyboardFocusWithin"
					 Value="True">
				<Setter Property="BorderBrush"
						Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--Set properties for DataGridRows-->
	<Style TargetType="{x:Type DataGridRow}">
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="Background"
				Value="Purple" />
		<Setter Property="BorderBrush"
				Value="DarkViolet" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Padding"
				Value="2" />
		<Setter Property="SnapsToDevicePixels"
				Value="true" />
		<Setter Property="Validation.ErrorTemplate"
				Value="{x:Null}" />
		<Setter Property="ValidationErrorTemplate">
			<Setter.Value>
				<ControlTemplate>
					<TextBlock Foreground="Red"
							   Margin="2,0,0,0"
							   Text="!"
							   VerticalAlignment="Center" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridRow}">
					<Border x:Name="DGR_Border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="True">
						<SelectiveScrollingGrid>
							<SelectiveScrollingGrid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
							</SelectiveScrollingGrid.ColumnDefinitions>
							<SelectiveScrollingGrid.RowDefinitions>
								<RowDefinition Height="*" />
								<RowDefinition Height="Auto" />
							</SelectiveScrollingGrid.RowDefinitions>
							<DataGridCellsPresenter Grid.Column="1"
													ItemsPanel="{TemplateBinding ItemsPanel}"
													SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							<DataGridDetailsPresenter Grid.Column="1"
													  Grid.Row="1"
													  SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
													  Visibility="{TemplateBinding DetailsVisibility}" />
							<DataGridRowHeader Grid.RowSpan="2"
											   SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
											   Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
						</SelectiveScrollingGrid>
					</Border>
					<ControlTemplate.Triggers>

						<!--Produce a nice hover animation and effect when hovering over an item.-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsSelected"
										   Value="False" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="DGR_Border"
														 From="1"
														 To="0.6"
														 Duration="0:0:0.5" />
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="DGR_Border"
														 From="0.6"
														 To="1"
														 Duration="0:0:0.5" />
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.ExitActions>
						</MultiTrigger>

						<!--When an item is selected, change the color.-->
						<Trigger Property="IsSelected"
								 Value="True">
							<Setter Property="Background"
									TargetName="DGR_Border"
									Value="DarkViolet" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected"
										   Value="true" />
								<Condition Property="Selector.IsSelectionActive"
										   Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="Background"
									TargetName="DGR_Border"
									Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsNewItem"
					 Value="True">
				<Setter Property="Margin"
						Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
			</Trigger>

		</Style.Triggers>
	</Style>

	<!--Set the properties for DataGrids-->
	<Style TargetType="{x:Type DataGrid}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Magenta" />
		<Setter Property="HorizontalGridLinesBrush"
				Value="White" />
	</Style>

	<!--Set properties for DatePickers-->
	<Style TargetType="{x:Type DatePicker}">
		<Setter Property="CalendarStyle"
				Value="{DynamicResource CalendarStyle}" />
		<Setter Property="IsTodayHighlighted"
				Value="True" />
		<Setter Property="SelectedDateFormat"
				Value="Short" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="Background"
				Value="{StaticResource CrystalBackgroundFill2}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource CrystalBorder2}" />
		<Setter Property="Padding"
				Value="2" />
		<Setter Property="BorderThickness"
				Value="{DynamicResource CrystalBorderThickness2}" />
		<Setter Property="Margin"
				Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DatePicker}">
					<Border BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="Transparent">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation Duration="0"
														 To="1"
														 Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="PART_DisabledVisual" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid x:Name="PART_Root"
							  HorizontalAlignment="Stretch"
							  VerticalAlignment="Stretch">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Button x:Name="PART_Button"
									Template="{StaticResource CrystalChromeButton}"
									Background="{TemplateBinding Background}"
									Grid.Column="1"
									Focusable="False"
									Padding="0"
									Margin="0"
									Width="15"
									BorderThickness="0">
								<Path x:Name="Arrow"
									  Data="M0,0L3.5,4 7,0z"
									  Fill="{TemplateBinding Foreground}"
									  HorizontalAlignment="Center"
									  Margin="0,1,0,0"
									  VerticalAlignment="Center" />
							</Button>
							<DatePickerTextBox x:Name="PART_TextBox"
											   Margin="0"
											   BorderThickness="0"
											   Background="{TemplateBinding Background}"
											   Padding="{TemplateBinding Padding}"
											   Focusable="{TemplateBinding Focusable}"
											   HorizontalContentAlignment="Stretch"
											   VerticalContentAlignment="Stretch">
								<DatePickerTextBox.Template>
									<ControlTemplate TargetType="{x:Type TextBoxBase}">
										<Border x:Name="Border"
												Opacity="0.8"
												BorderBrush="{TemplateBinding BorderBrush}"
												BorderThickness="{TemplateBinding BorderThickness}"
												Background="{TemplateBinding Background}"
												SnapsToDevicePixels="True">
											<VisualStateManager.VisualStateGroups>
												<VisualStateGroup Name="CommonStates">
													<VisualStateGroup.Transitions>
														<VisualTransition GeneratedDuration="0:0:0.5" />
													</VisualStateGroup.Transitions>
													<VisualState Name="Normal" />
													<VisualState Name="MouseOver">
														<Storyboard>
															<DoubleAnimation Storyboard.TargetProperty="Opacity"
																			 Storyboard.TargetName="Border"
																			 To="0.925" />
														</Storyboard>
													</VisualState>
													<VisualState Name="Disabled">
														<Storyboard>
															<DoubleAnimation Storyboard.TargetProperty="Opacity"
																			 To="0.3" />
														</Storyboard>
													</VisualState>
												</VisualStateGroup>
											</VisualStateManager.VisualStateGroups>
											<ScrollViewer x:Name="PART_ContentHost"
														  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
										</Border>
										<ControlTemplate.Triggers>
											<Trigger Property="IsFocused"
													 Value="True">
												<Setter Property="BorderBrush"
														Value="White"
														TargetName="Border" />
												<Setter Property="BorderThickness"
														Value="1"
														TargetName="Border" />
												<Setter Property="Opacity"
														Value="1" />
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</DatePickerTextBox.Template>
							</DatePickerTextBox>
							<Grid x:Name="PART_DisabledVisual"
								  Grid.ColumnSpan="2"
								  Grid.Column="0"
								  IsHitTestVisible="False"
								  Opacity="0"
								  Grid.Row="0">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<Popup x:Name="PART_Popup"
									   PopupAnimation="Slide"
									   AllowsTransparency="True"
									   Placement="Bottom"
									   PlacementTarget="{Binding ElementName=PART_TextBox}"
									   StaysOpen="False" />
							</Grid>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}"
									 Value="false">
							<Setter Property="Foreground"
									TargetName="PART_TextBox"
									Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for Expanders-->
	<SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke"
					 Color="DodgerBlue" />
	<SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill"
					 Color="Transparent" />
	<SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke"
					 Color="DodgerBlue" />
	<SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke"
					 Color="DarkBlue" />
	<SolidColorBrush x:Key="Expander.Pressed.Circle.Fill"
					 Color="Transparent" />
	<SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke"
					 Color="DarkBlue" />
	<SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke"
					 Color="DarkGray" />
	<SolidColorBrush x:Key="Expander.Disabled.Circle.Fill"
					 Color="Transparent" />
	<SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke"
					 Color="#666" />
	<SolidColorBrush x:Key="Expander.Static.Circle.Fill"
					 Color="Transparent" />

	<!--The expander static circle and arrow stroke are bound to the foreground color-->
	<Style x:Key="ExpanderRightHeaderStyle"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid Background="Transparent"
							  SnapsToDevicePixels="False">
							<Grid.RowDefinitions>
								<RowDefinition Height="19" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>
							<Grid>
								<Grid.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform Angle="-90" />
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</Grid.LayoutTransform>
								<Ellipse x:Name="circle"
										 Fill="{StaticResource Expander.Static.Circle.Fill}"
										 HorizontalAlignment="Center"
										 Height="19"
										 Stroke="{TemplateBinding Foreground}"
										 VerticalAlignment="Center"
										 Width="19" />
								<Path x:Name="arrow"
									  Data="M 1,1.5 L 4.5,5 L 8,1.5"
									  HorizontalAlignment="Center"
									  SnapsToDevicePixels="false"
									  Stroke="{TemplateBinding Foreground}"
									  StrokeThickness="2"
									  VerticalAlignment="Center" />
							</Grid>
							<ContentPresenter HorizontalAlignment="Center"
											  Margin="0,4,0,0"
											  Grid.Row="1"
											  RecognizesAccessKey="True"
											  SnapsToDevicePixels="True"
											  VerticalAlignment="Top" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked"
								 Value="true">
							<Setter Property="Data"
									TargetName="arrow"
									Value="M 1,4.5 L 4.5,1 L 8,4.5" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.MouseOver.Circle.Stroke}" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.MouseOver.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.Pressed.Circle.Stroke}" />
							<Setter Property="StrokeThickness"
									TargetName="circle"
									Value="1.5" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.Pressed.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.Pressed.Arrow.Stroke}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.Disabled.Circle.Stroke}" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.Disabled.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExpanderUpHeaderStyle"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid Background="Transparent"
							  SnapsToDevicePixels="False">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="19" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<Grid>
								<Grid.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform Angle="180" />
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</Grid.LayoutTransform>
								<Ellipse x:Name="circle"
										 Fill="{StaticResource Expander.Static.Circle.Fill}"
										 HorizontalAlignment="Center"
										 Height="19"
										 Stroke="{TemplateBinding Foreground}"
										 VerticalAlignment="Center"
										 Width="19" />
								<Path x:Name="arrow"
									  Data="M 1,1.5 L 4.5,5 L 8,1.5"
									  HorizontalAlignment="Center"
									  SnapsToDevicePixels="false"
									  Stroke="{TemplateBinding Foreground}"
									  StrokeThickness="2"
									  VerticalAlignment="Center" />
							</Grid>
							<ContentPresenter Grid.Column="1"
											  HorizontalAlignment="Left"
											  Margin="4,0,0,0"
											  RecognizesAccessKey="True"
											  SnapsToDevicePixels="True"
											  VerticalAlignment="Center" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked"
								 Value="true">
							<Setter Property="Data"
									TargetName="arrow"
									Value="M 1,4.5 L 4.5,1 L 8,4.5" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.MouseOver.Circle.Stroke}" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.MouseOver.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.Pressed.Circle.Stroke}" />
							<Setter Property="StrokeThickness"
									TargetName="circle"
									Value="1.5" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.Pressed.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.Pressed.Arrow.Stroke}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.Disabled.Circle.Stroke}" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.Disabled.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExpanderLeftHeaderStyle"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid Background="Transparent"
							  SnapsToDevicePixels="False">
							<Grid.RowDefinitions>
								<RowDefinition Height="19" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>
							<Grid>
								<Grid.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform Angle="90" />
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</Grid.LayoutTransform>
								<Ellipse x:Name="circle"
										 Fill="{StaticResource Expander.Static.Circle.Fill}"
										 HorizontalAlignment="Center"
										 Height="19"
										 Stroke="{TemplateBinding Foreground}"
										 VerticalAlignment="Center"
										 Width="19" />
								<Path x:Name="arrow"
									  Data="M 1,1.5 L 4.5,5 L 8,1.5"
									  HorizontalAlignment="Center"
									  SnapsToDevicePixels="false"
									  Stroke="{TemplateBinding Foreground}"
									  StrokeThickness="2"
									  VerticalAlignment="Center" />
							</Grid>
							<ContentPresenter HorizontalAlignment="Center"
											  Margin="0,4,0,0"
											  Grid.Row="1"
											  RecognizesAccessKey="True"
											  SnapsToDevicePixels="True"
											  VerticalAlignment="Top" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked"
								 Value="true">
							<Setter Property="Data"
									TargetName="arrow"
									Value="M 1,4.5 L 4.5,1 L 8,4.5" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.MouseOver.Circle.Stroke}" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.MouseOver.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.Pressed.Circle.Stroke}" />
							<Setter Property="StrokeThickness"
									TargetName="circle"
									Value="1.5" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.Pressed.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.Pressed.Arrow.Stroke}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.Disabled.Circle.Stroke}" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.Disabled.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExpanderHeaderFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="0"
								   SnapsToDevicePixels="true"
								   Stroke="Black"
								   StrokeThickness="1"
								   StrokeDashArray="1 2" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExpanderDownHeaderStyle"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Padding="{TemplateBinding Padding}">
						<Grid Background="Transparent"
							  SnapsToDevicePixels="False">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="19" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<Ellipse x:Name="circle"
									 Fill="{StaticResource Expander.Static.Circle.Fill}"
									 HorizontalAlignment="Center"
									 Height="19"
									 Stroke="{TemplateBinding Foreground}"
									 VerticalAlignment="Center"
									 Width="19" />
							<Path x:Name="arrow"
								  Data="M 1,1.5 L 4.5,5 L 8,1.5"
								  HorizontalAlignment="Center"
								  SnapsToDevicePixels="false"
								  Stroke="{TemplateBinding Foreground}"
								  StrokeThickness="2"
								  VerticalAlignment="Center" />
							<ContentPresenter Grid.Column="1"
											  HorizontalAlignment="Left"
											  Margin="4,0,0,0"
											  RecognizesAccessKey="True"
											  SnapsToDevicePixels="True"
											  VerticalAlignment="Center" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked"
								 Value="true">
							<Setter Property="Data"
									TargetName="arrow"
									Value="M 1,4.5 L 4.5,1 L 8,4.5" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.MouseOver.Circle.Stroke}" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.MouseOver.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.Pressed.Circle.Stroke}" />
							<Setter Property="StrokeThickness"
									TargetName="circle"
									Value="1.5" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.Pressed.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.Pressed.Arrow.Stroke}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Stroke"
									TargetName="circle"
									Value="{StaticResource Expander.Disabled.Circle.Stroke}" />
							<Setter Property="Fill"
									TargetName="circle"
									Value="{StaticResource Expander.Disabled.Circle.Fill}" />
							<Setter Property="Stroke"
									TargetName="arrow"
									Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type Expander}">
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="HorizontalContentAlignment"
				Value="Stretch" />
		<Setter Property="VerticalContentAlignment"
				Value="Stretch" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<Border BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							CornerRadius="3"
							SnapsToDevicePixels="true">
						<DockPanel>
							<ToggleButton x:Name="HeaderSite"
										  ContentTemplate="{TemplateBinding HeaderTemplate}"
										  ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
										  Content="{TemplateBinding Header}"
										  DockPanel.Dock="Top"
										  Foreground="{TemplateBinding Foreground}"
										  FontWeight="{TemplateBinding FontWeight}"
										  FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
										  FontStyle="{TemplateBinding FontStyle}"
										  FontStretch="{TemplateBinding FontStretch}"
										  FontSize="{TemplateBinding FontSize}"
										  FontFamily="{TemplateBinding FontFamily}"
										  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
										  IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
										  Margin="1"
										  MinWidth="0"
										  MinHeight="0"
										  Padding="{TemplateBinding Padding}"
										  Style="{StaticResource ExpanderDownHeaderStyle}"
										  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
							<ContentPresenter x:Name="ExpandSite"
											  DockPanel.Dock="Bottom"
											  Focusable="false"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  Margin="{TemplateBinding Padding}"
											  Visibility="Collapsed"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded"
								 Value="true">
							<Setter Property="Visibility"
									TargetName="ExpandSite"
									Value="Visible" />
						</Trigger>
						<Trigger Property="ExpandDirection"
								 Value="Right">
							<Setter Property="DockPanel.Dock"
									TargetName="ExpandSite"
									Value="Right" />
							<Setter Property="DockPanel.Dock"
									TargetName="HeaderSite"
									Value="Left" />
							<Setter Property="Style"
									TargetName="HeaderSite"
									Value="{StaticResource ExpanderRightHeaderStyle}" />
						</Trigger>
						<Trigger Property="ExpandDirection"
								 Value="Up">
							<Setter Property="DockPanel.Dock"
									TargetName="ExpandSite"
									Value="Top" />
							<Setter Property="DockPanel.Dock"
									TargetName="HeaderSite"
									Value="Bottom" />
							<Setter Property="Style"
									TargetName="HeaderSite"
									Value="{StaticResource ExpanderUpHeaderStyle}" />
						</Trigger>
						<Trigger Property="ExpandDirection"
								 Value="Left">
							<Setter Property="DockPanel.Dock"
									TargetName="ExpandSite"
									Value="Left" />
							<Setter Property="DockPanel.Dock"
									TargetName="HeaderSite"
									Value="Right" />
							<Setter Property="Style"
									TargetName="HeaderSite"
									Value="{StaticResource ExpanderLeftHeaderStyle}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for GroupBoxes-->
	<Style TargetType="{x:Type GroupBox}">
		<Setter Property="Padding"
				Value="10" />
		<Setter Property="BorderThickness"
				Value="0" />
		<Setter Property="Foreground"
				Value="Green" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupBox}">
					<Grid SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="6" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="6" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
							<RowDefinition Height="6" />
						</Grid.RowDefinitions>
						<Border x:Name="Header"
								Grid.Column="1"
								Padding="3,1,3,0"
								Grid.Row="0"
								Grid.RowSpan="2">
							<ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}"
											  TextElement.Foreground="{TemplateBinding Foreground}"
											  Content="{TemplateBinding Header}"
											  TextElement.FontSize="16"
											  TextElement.FontWeight="Thin"
											  ContentStringFormat="{TemplateBinding HeaderStringFormat}"
											  ContentSource="Header"
											  RecognizesAccessKey="True"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
						<Border Grid.ColumnSpan="2"
								Grid.Column="1"
								Grid.Row="2"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}">
							<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
											  Content="{TemplateBinding Content}"
											  ContentStringFormat="{TemplateBinding ContentStringFormat}"
											  Margin="{TemplateBinding Padding}"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for thick headings-->
	<Style  x:Key="CrystalHeadings"
			TargetType="{x:Type Label}">
		<Setter Property="FontFamily"
				Value="Cambria" />
		<Setter Property="FontWeight"
				Value="Bold" />
		<Setter Property="FontSize"
				Value="18px" />
		<Setter Property="Foreground"
				Value="White" />
	</Style>

	<!--Set properties for dark thick headings-->
	<Style  x:Key="CrystalHeadingsDark"
			TargetType="{x:Type Label}"
			BasedOn="{StaticResource CrystalHeadings}">
		<Setter Property="Foreground"
				Value="Black" />
	</Style>

	<!--Set properties for thin headings-->
	<Style  x:Key="CrystalHeadings2"
			TargetType="{x:Type Label}">
		<Setter Property="FontFamily"
				Value="Segoe UI" />
		<Setter Property="FontWeight"
				Value="Thin" />
		<Setter Property="FontSize"
				Value="18px" />
		<Setter Property="Foreground"
				Value="White" />
	</Style>

	<!--Set properties for dark thin headings-->
	<Style  x:Key="CrystalHeadings2Dark"
			TargetType="{x:Type Label}"
			BasedOn="{StaticResource CrystalHeadings2}">
		<Setter Property="Foreground"
				Value="Black" />
	</Style>

	<!--Set properties for Hyperlinks-->
	<Style TargetType="Hyperlink"
		   x:Key="TabControlHyperLinks">
		<Setter Property="TextDecorations"
				Value="Underline" />
		<Setter Property="Foreground"
				Value="Black" />
		<Setter Property="FontSize"
				Value="16" />
		<Setter Property="FontWeight"
				Value="Light" />
		<Setter Property="FontFamily"
				Value="Calibri" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver"
					 Value="True">
				<Setter Property="Foreground"
						Value="Gray" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--Set properties for Labels-->
	<Style TargetType="{x:Type Label}">
		<Setter Property="Foreground"
				Value="Black" />
	</Style>

	<Style TargetType="Label"
		   x:Key="Heading1">
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="Background"
				Value="DarkGray" />
		<Setter Property="FontFamily"
				Value="SegoeUI" />
		<Setter Property="FontSize"
				Value="18" />
	</Style>

	<!--Set properties for ListBoxItems-->
	<Style TargetType="{x:Type ListBoxItem}">
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="Background"
				Value="Purple" />
		<Setter Property="BorderBrush"
				Value="DarkViolet" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Padding"
				Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid ClipToBounds="{TemplateBinding ClipToBounds}"
						  MinHeight="15">
						<Border x:Name="Background"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}" />
						<ContentPresenter RecognizesAccessKey="True"
										  Margin="{TemplateBinding Padding}"
										  x:Name="Content"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>

			<!--Produce a nice hover animation and effect when hovering over an item.-->
			<Trigger Property="IsMouseOver"
					 Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetProperty="Opacity"
											 From="1"
											 To="0.6"
											 Duration="0:0:0.5" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetProperty="Opacity"
											 From="0.6"
											 To="1"
											 Duration="0:0:0.5" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.ExitActions>
			</Trigger>

			<!--When an item is selected, make it purple.-->
			<Trigger Property="IsSelected"
					 Value="True">
				<Setter Property="Background"
						Value="DarkViolet" />
			</Trigger>
		</Style.Triggers>

	</Style>

	<!--Set properties for ListBoxes-->
	<Style TargetType="{x:Type ListBox}">
		<Setter Property="BorderBrush"
				Value="DarkViolet" />
		<Setter Property="BorderThickness"
				Value="{StaticResource CrystalBorderThickness2}" />
		<Setter Property="Padding"
				Value="0" />
		<Setter Property="Background"
				Value="Transparent" />
	</Style>

	<!--Set properties for paragraphs-->
	<Style TargetType="{x:Type Paragraph}">
		<Setter Property="FontFamily"
				Value="Segoe UI" />
		<Setter Property="FontSize"
				Value="12" />
	</Style>

	<!--Set properties for PasswordBoxes-->
	<Style TargetType="{x:Type PasswordBox}">
		<Setter Property="Background"
				Value="{DynamicResource CrystalBackgroundFill2}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource CrystalBorder2}" />
		<Setter Property="BorderThickness"
				Value="{DynamicResource CrystalBorderThickness2}" />
		<Setter Property="Margin"
				Value="1" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="CaretBrush"
				Value="White" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type PasswordBox}">
					<Border x:Name="Border"
							Opacity="0.8"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="True">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.5" />
								</VisualStateGroup.Transitions>
								<VisualState Name="Normal" />
								<VisualState Name="MouseOver">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="Border"
														 To="0.925" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<ScrollViewer x:Name="PART_ContentHost"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="Background"
									TargetName="Border"
									Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
							<Setter Property="TextElement.Foreground"
									TargetName="Border"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
						<Trigger Property="IsFocused"
								 Value="True">
							<Setter Property="BorderBrush"
									TargetName="Border"
									Value="White" />
							<Setter Property="BorderThickness"
									TargetName="Border"
									Value="1" />
							<Setter Property="Opacity"
									TargetName="Border"
									Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for Popups-->
	<Style TargetType="{x:Type Popup}">
		<Setter Property="StaysOpen"
				Value="False" />
		<Setter Property="AllowsTransparency"
				Value="True" />
		<Setter Property="PopupAnimation"
				Value="Slide" />
	</Style>

	<!--Set properties for ProgressBars-->
	<SolidColorBrush x:Key="ProgressBar.Progress"
					 Color="DarkViolet" />
	<SolidColorBrush x:Key="ProgressBar.Background"
					 Color="#32E6E6E6" />
	<SolidColorBrush x:Key="ProgressBar.Border"
					 Color="#32BCBCBC" />
	<CornerRadius x:Key="ProgressBarCornerRadius"
				  BottomLeft="15"
				  BottomRight="15"
				  TopLeft="15"
				  TopRight="15" />
	<Style TargetType="{x:Type ProgressBar}">
		<Setter Property="Foreground"
				Value="{StaticResource ProgressBar.Progress}" />
		<Setter Property="Background"
				Value="{StaticResource ProgressBar.Background}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource ProgressBar.Border}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid x:Name="TemplateRoot">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Determinate" />
								<VisualState x:Name="Indeterminate">
									<Storyboard RepeatBehavior="Forever">
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
																	   Storyboard.TargetName="Animation">
											<EasingDoubleKeyFrame KeyTime="0"
																  Value="0.25" />
											<EasingDoubleKeyFrame KeyTime="0:0:1"
																  Value="0.25" />
											<EasingDoubleKeyFrame KeyTime="0:0:2"
																  Value="0.25" />
										</DoubleAnimationUsingKeyFrames>
										<PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)"
																	  Storyboard.TargetName="Animation">
											<EasingPointKeyFrame KeyTime="0"
																 Value="-0.5,0.5" />
											<EasingPointKeyFrame KeyTime="0:0:1"
																 Value="0.5,0.5" />
											<EasingPointKeyFrame KeyTime="0:0:2"
																 Value="1.5,0.5" />
										</PointAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								CornerRadius="{StaticResource ProgressBarCornerRadius}"
								Background="{TemplateBinding Background}" />
						<Rectangle x:Name="PART_Track" />
						<Grid x:Name="PART_Indicator"
							  HorizontalAlignment="Left"
							  ClipToBounds="true">
							<Border x:Name="Indicator"
									CornerRadius="{StaticResource ProgressBarCornerRadius}"
									Background="{TemplateBinding Foreground}" />
							<Border x:Name="Animation"
									CornerRadius="{StaticResource ProgressBarCornerRadius}"
									RenderTransformOrigin="0.5,0.5"
									Background="{TemplateBinding Foreground}">
								<Border.RenderTransform>
									<TransformGroup>
										<ScaleTransform />
										<SkewTransform />
										<RotateTransform />
										<TranslateTransform />
									</TransformGroup>
								</Border.RenderTransform>
							</Border>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation"
								 Value="Vertical">
							<Setter Property="LayoutTransform"
									TargetName="TemplateRoot">
								<Setter.Value>
									<RotateTransform Angle="-90" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsIndeterminate"
								 Value="true">
							<Setter Property="Visibility"
									TargetName="Indicator"
									Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type local:NumericUpDown}">
		<Setter Property="Background"
				Value="{StaticResource CrystalBackgroundFill2}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource CrystalBorder2}" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:NumericUpDown}">
					<Grid ClipToBounds="{TemplateBinding ClipToBounds}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition Width="40" />
						</Grid.ColumnDefinitions>
						<TextBox x:Name="PART_Text"
								 Opacity="0.9"
								 Background="{TemplateBinding Background}"
								 BorderBrush="{TemplateBinding BorderBrush}"
								 Foreground="{TemplateBinding Foreground}" />
						<Grid Grid.Column="1">
							<Grid.RowDefinitions>
								<RowDefinition />
								<RowDefinition />
							</Grid.RowDefinitions>
							<RepeatButton x:Name="PART_Increment"
										  HorizontalAlignment="Stretch"
										  Template="{StaticResource CrystalRepeatButton}"
										  Background="{TemplateBinding Background}"
										  BorderBrush="{TemplateBinding BorderBrush}"
										  Foreground="{TemplateBinding Foreground}"
										  Content="▲" />
							<RepeatButton Grid.Row="1"
										  HorizontalAlignment="Stretch"
										  Template="{StaticResource CrystalRepeatButton}"
										  Background="{TemplateBinding Background}"
										  BorderBrush="{TemplateBinding BorderBrush}"
										  Foreground="{TemplateBinding Foreground}"
										  x:Name="PART_Decrement"
										  Content="▼" />
						</Grid>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for ScrollBars-->
	<SolidColorBrush x:Key="ThumbBackground"
					 Color="WhiteSmoke" />
	<SolidColorBrush x:Key="ThumbBorderBrush"
					 Color="LightGray" />
	<CornerRadius x:Key="CornerRadius"
				  BottomLeft="3"
				  BottomRight="3"
				  TopLeft="3"
				  TopRight="3" />
	<SolidColorBrush x:Key="VerticalScrollBarBackground"
					 Color="Gray" />
	<SolidColorBrush x:Key="HorizontalScrollBarBackground"
					 Color="Gray" />
	<SolidColorBrush x:Key="ScrollBarDisabledBackground"
					 Color="WhiteSmoke" />
	<Style x:Key="ScrollBarButton"
		   TargetType="{x:Type RepeatButton}">
		<Setter Property="Padding"
				Value="0" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="FontFamily"
				Value="Wingdings 3" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="Template"
				Value="{StaticResource CrystalRepeatButton}" />
	</Style>
	<Style x:Key="VerticalScrollBarPageButton"
		   TargetType="{x:Type RepeatButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Focusable"
				Value="false" />
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Rectangle Fill="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ScrollBarThumb"
		   TargetType="{x:Type Thumb}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border x:Name="Chrome"
							Opacity="0.5"
							Background="{StaticResource ThumbBackground}"
							BorderBrush="{StaticResource ThumbBorderBrush}"
							BorderThickness="1"
							CornerRadius="{StaticResource CornerRadius}"
							SnapsToDevicePixels="true" />
					<ControlTemplate.Triggers>

						<!--While the thumb is dragging, it will have a black background.-->
						<Trigger Property="IsDragging"
								 Value="True">
							<Setter Property="Background"
									TargetName="Chrome"
									Value="Black" />
							<Setter Property="BorderBrush"
									TargetName="Chrome"
									Value="Black" />
						</Trigger>

						<!--While the mouse hovers over the thumb, the background will slowly illuminate.-->
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard x:Name="HoverStoryboard">
									<Storyboard Storyboard.TargetName="Chrome"
												Storyboard.TargetProperty="Opacity">
										<DoubleAnimation To="0.8"
														 Duration="0:0:0.5" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard x:Name="RemoveHoverStoryboard">
									<Storyboard Storyboard.TargetName="Chrome"
												Storyboard.TargetProperty="Opacity">
										<DoubleAnimation To="0.5"
														 Duration="0:0:0.5" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="HorizontalScrollBarPageButton"
		   TargetType="{x:Type RepeatButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Focusable"
				Value="false" />
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Rectangle Fill="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ScrollBar}">
		<Setter Property="Background"
				Value="{StaticResource VerticalScrollBarBackground}" />
		<Setter Property="Stylus.IsPressAndHoldEnabled"
				Value="False" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="Width"
				Value="4" />
		<Setter Property="MinWidth"
				Value="4" />
		<Setter Property="Opacity"
				Value="0.2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid SnapsToDevicePixels="true">
						<Grid.RowDefinitions>
							<RowDefinition Height="0.00001*" />
						</Grid.RowDefinitions>
						<Border x:Name="Bg"
								Background="{TemplateBinding Background}"
								CornerRadius="{StaticResource CornerRadius}" />
						<Track x:Name="PART_Track"
							   IsDirectionReversed="true"
							   IsEnabled="{TemplateBinding IsMouseOver}">

							<Track.DecreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageUpCommand}"
											  Style="{StaticResource VerticalScrollBarPageButton}" />
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageDownCommand}"
											  Style="{StaticResource VerticalScrollBarPageButton}" />
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb Style="{StaticResource ScrollBarThumb}"
									   Margin="0,1" />
							</Track.Thumb>
						</Track>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Background"
									TargetName="Bg"
									Value="{StaticResource ScrollBarDisabledBackground}" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard Storyboard.TargetProperty="Opacity">
										<DoubleAnimation From="0.2"
														 To="0.8"
														 Duration="0:0:0.5" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard Storyboard.TargetProperty="Opacity">
										<DoubleAnimation From="0.8"
														 To="0.2"
														 Duration="0:0:0.5" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation"
					 Value="Horizontal">
				<Setter Property="Width"
						Value="Auto" />
				<Setter Property="Height"
						Value="4" />
				<Setter Property="MinHeight"
						Value="4" />
				<Setter Property="Background"
						Value="{StaticResource HorizontalScrollBarBackground}" />
				<Setter Property="Opacity"
						Value="0.2" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid x:Name="Bg"
								  Background="{TemplateBinding Background}"
								  SnapsToDevicePixels="true">
								<Grid.ColumnDefinitions>

									<ColumnDefinition Width="0.00001*" />

								</Grid.ColumnDefinitions>

								<Track x:Name="PART_Track"
									   IsEnabled="{TemplateBinding IsMouseOver}">
									<Track.DecreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}"
													  Style="{StaticResource HorizontalScrollBarPageButton}" />
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageRightCommand}"
													  Style="{StaticResource HorizontalScrollBarPageButton}" />
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb Style="{StaticResource ScrollBarThumb}"
											   Margin="1,0" />
									</Track.Thumb>
								</Track>

							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver"
										 Value="True">
									<Trigger.EnterActions>
										<BeginStoryboard>
											<Storyboard Storyboard.TargetProperty="Opacity">
												<DoubleAnimation From="0.2"
																 To="0.8"
																 Duration="0:0:0.5" />
											</Storyboard>
										</BeginStoryboard>
									</Trigger.EnterActions>
									<Trigger.ExitActions>
										<BeginStoryboard>
											<Storyboard Storyboard.TargetProperty="Opacity">
												<DoubleAnimation From="0.8"
																 To="0.2"
																 Duration="0:0:0.5" />
											</Storyboard>
										</BeginStoryboard>
									</Trigger.ExitActions>
								</Trigger>
								<Trigger Property="IsEnabled"
										 Value="false">
									<Setter Property="Background"
											TargetName="Bg"
											Value="{StaticResource ScrollBarDisabledBackground}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--Set properties for SearchBoxes-->
	<Style TargetType="{x:Type Border}"
		   x:Key="SearchStyle">
		<Setter Property="Background"
				Value="White" />
		<Setter Property="BorderBrush"
				Value="Gray" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver"
					 Value="True">
				<Setter Property="BorderBrush"
						Value="Orange" />
			</Trigger>
			<Trigger Property="IsFocused"
					 Value="True">
				<Setter Property="BorderBrush"
						Value="DarkOrange" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="SearchTextBoxStyle"
		   TargetType="{x:Type TextBox}">
		<Setter Property="Background"
				Value="White" />
		<Setter Property="Foreground"
				Value="Black" />
		<Setter Property="BorderBrush"
				Value="{StaticResource CrystalBorder2}" />
		<Setter Property="BorderThickness"
				Value="{DynamicResource CrystalBorderThickness2}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border x:Name="Bd"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="True">
						<ScrollViewer x:Name="PART_ContentHost"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="Background"
									TargetName="Bd"
									Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for TabItems-->
	<Style x:Key="TabItemFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="3,3,3,1"
							   SnapsToDevicePixels="true"
							   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
							   StrokeThickness="1"
							   StrokeDashArray="1 2" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="TabControlNormalBorderBrush"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ButtonNormalBackground"
					 Color="Transparent" />
	<SolidColorBrush x:Key="TabItemHotBackground"
					 Color="LightSkyBlue" />
	<SolidColorBrush x:Key="TabItemHotBorderBrush"
					 Color="Transparent" />
	<SolidColorBrush x:Key="TabItemSelectedBackground"
					 Color="CornFlowerBlue" />
	<SolidColorBrush x:Key="TabItemSelectedForeground"
					 Color="White" />
	<SolidColorBrush x:Key="TabItemDisabledBackground"
					 Color="#F4F4F4" />
	<SolidColorBrush x:Key="TabItemDisabledBorderBrush"
					 Color="#FFC9C7BA" />
	<Style TargetType="{x:Type TabItem}">
		<Setter Property="FocusVisualStyle"
				Value="{StaticResource TabItemFocusVisual}" />
		<Setter Property="Foreground"
				Value="Black" />
		<Setter Property="BorderBrush"
				Value="{StaticResource TabControlNormalBorderBrush}" />
		<Setter Property="Background"
				Value="{StaticResource ButtonNormalBackground}" />
		<Setter Property="Height"
				Value="35" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid SnapsToDevicePixels="true">
						<Border x:Name="Bd"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="1,1,1,0"
								Background="{TemplateBinding Background}"
								Padding="{TemplateBinding Padding}">
							<ContentPresenter x:Name="Content"
											  TextElement.FontSize="16"
											  TextElement.FontWeight="Light"
											  TextElement.FontFamily="Calibri"
											  Margin="20,0"
											  ContentSource="Header"
											  HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
											  RecognizesAccessKey="True"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											  VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="true" />
								<Condition Property="Focusable"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background"
									TargetName="Bd"
									Value="{StaticResource TabItemHotBackground}" />
						</MultiTrigger>
						<Trigger Property="IsSelected"
								 Value="true">
							<Setter Property="Panel.ZIndex"
									Value="1" />
							<Setter Property="TextElement.Foreground"
									TargetName="Content"
									Value="{StaticResource TabItemSelectedForeground}" />
							<Setter Property="Background"
									TargetName="Bd"
									Value="{StaticResource TabItemSelectedBackground}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected"
										   Value="false" />
								<Condition Property="IsMouseOver"
										   Value="true" />
								<Condition Property="Focusable"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush"
									TargetName="Bd"
									Value="{StaticResource TabItemHotBorderBrush}" />
						</MultiTrigger>
						<Trigger Property="TabStripPlacement"
								 Value="Bottom">
							<Setter Property="BorderThickness"
									TargetName="Bd"
									Value="1,0,1,1" />
						</Trigger>
						<Trigger Property="TabStripPlacement"
								 Value="Left">
							<Setter Property="Margin"
									TargetName="Content"
									Value="50,0,0,0" />
							<Setter Property="Width"
									Value="300" />
							<Setter Property="BorderThickness"
									TargetName="Bd"
									Value="1,1,0,1" />
						</Trigger>
						<Trigger Property="TabStripPlacement"
								 Value="Right">
							<Setter Property="Margin"
									TargetName="Content"
									Value="50,0,0,0" />
							<Setter Property="Width"
									Value="300" />
							<Setter Property="BorderThickness"
									TargetName="Bd"
									Value="0,1,1,1" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Background"
									TargetName="Bd"
									Value="{StaticResource TabItemDisabledBackground}" />
							<Setter Property="BorderBrush"
									TargetName="Bd"
									Value="{StaticResource TabItemDisabledBorderBrush}" />
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type TabItem}"
		   x:Key="Tab17"
		   BasedOn="{StaticResource {x:Type TabItem}}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid Name="MainGrid"
						  SnapsToDevicePixels="true">
						<Grid.RowDefinitions>
							<RowDefinition Name="RDefinition1"
										   Height="5" />
							<RowDefinition Name="RDefinition2" />
						</Grid.RowDefinitions>
						<Border x:Name="Bd"
								HorizontalAlignment="Stretch"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="1,1,1,0"
								Background="{TemplateBinding Background}"
								Padding="{TemplateBinding Padding}" />
						<ContentPresenter x:Name="Content"
										  TextElement.FontSize="16"
										  TextElement.FontWeight="Light"
										  TextElement.FontFamily="Calibri"
										  Margin="20,0"
										  ContentSource="Header"
										  HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
										  RecognizesAccessKey="True"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
										  Grid.Row="1" />

					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="true" />
								<Condition Property="Focusable"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Background"
									TargetName="Bd"
									Value="{StaticResource TabItemHotBackground}" />
						</MultiTrigger>
						<Trigger Property="IsSelected"
								 Value="true">
							<Setter Property="Panel.ZIndex"
									Value="1" />
							<Setter Property="Background"
									TargetName="Bd"
									Value="{StaticResource TabItemSelectedBackground}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected"
										   Value="false" />
								<Condition Property="IsMouseOver"
										   Value="true" />
								<Condition Property="Focusable"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush"
									TargetName="Bd"
									Value="{StaticResource TabItemHotBorderBrush}" />
						</MultiTrigger>
						<Trigger Property="TabStripPlacement"
								 Value="Bottom">
							<Setter Property="BorderThickness"
									TargetName="Bd"
									Value="1,0,1,1" />
							<Setter Property="Grid.Row"
									TargetName="Bd"
									Value="1" />
							<Setter Property="Grid.Row"
									TargetName="Content"
									Value="0" />
							<Setter TargetName="RDefinition1"
									Property="Height"
									Value="*" />
							<Setter TargetName="RDefinition2"
									Property="Height"
									Value="5" />
						</Trigger>
						<Trigger Property="TabStripPlacement"
								 Value="Left">
							<Setter Property="Margin"
									TargetName="Content"
									Value="50,0,0,0" />
							<Setter Property="Width"
									Value="300" />
							<Setter Property="BorderThickness"
									TargetName="Bd"
									Value="1,1,0,1" />
							<Setter TargetName="Bd"
									Property="Width"
									Value="30" />
							<Setter Property="Grid.Row"
									TargetName="Bd"
									Value="1" />
							<Setter Property="Grid.Row"
									TargetName="Content"
									Value="0" />
							<Setter TargetName="RDefinition1"
									Property="Height"
									Value="*" />
							<Setter TargetName="RDefinition2"
									Property="Height"
									Value="5" />
							<Setter TargetName="Bd"
									Property="HorizontalAlignment"
									Value="Left" />
							<Setter Property="RenderTransform"
									TargetName="Bd">
								<Setter.Value>
									<RotateTransform Angle="270" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="TabStripPlacement"
								 Value="Right">
							<Setter Property="Margin"
									TargetName="Content"
									Value="50,0,0,0" />
							<Setter Property="Width"
									Value="300" />
							<Setter Property="BorderThickness"
									TargetName="Bd"
									Value="0,1,1,1" />
							<Setter TargetName="Bd"
									Property="Width"
									Value="30" />
							<Setter TargetName="Bd"
									Property="HorizontalAlignment"
									Value="Right" />
							<Setter Property="RenderTransform"
									TargetName="Bd">
								<Setter.Value>
									<RotateTransform Angle="90" CenterX="30"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Background"
									TargetName="Bd"
									Value="{StaticResource TabItemDisabledBackground}" />
							<Setter Property="BorderBrush"
									TargetName="Bd"
									Value="{StaticResource TabItemDisabledBorderBrush}" />
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for TabControls-->
	<SolidColorBrush x:Key="TabControlNormalBorderBrush2"
					 Color="#8C8E94" />
	<SolidColorBrush x:Key="HeaderPanelBackground"
					 Color="#F9F9F9" />
	<Style TargetType="{x:Type TabControl}">
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Padding"
				Value="4" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="BorderBrush"
				Value="{StaticResource TabControlNormalBorderBrush}" />
		<Setter Property="Background"
				Value="White" />
		<Setter Property="HorizontalContentAlignment"
				Value="Left" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Grid ClipToBounds="true"
						  SnapsToDevicePixels="true"
						  KeyboardNavigation.TabNavigation="Local">
						<Grid.ColumnDefinitions>
							<ColumnDefinition x:Name="ColumnDefinition0" />
							<ColumnDefinition x:Name="ColumnDefinition1"
											  Width="0" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition x:Name="RowDefinition0"
										   Height="Auto" />
							<RowDefinition x:Name="RowDefinition1"
										   Height="*" />
						</Grid.RowDefinitions>
						<ScrollViewer VerticalScrollBarVisibility="Auto"
									  x:Name="HeaderPanel">
							<TabPanel Background="{StaticResource HeaderPanelBackground}"
									  IsItemsHost="true"
									  KeyboardNavigation.TabIndex="1"
									  Panel.ZIndex="1" />
						</ScrollViewer>
						<Border x:Name="ContentPanel"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								Grid.Column="0"
								KeyboardNavigation.DirectionalNavigation="Contained"
								Grid.Row="1"
								Padding="20,20,0,20"
								KeyboardNavigation.TabIndex="2"
								KeyboardNavigation.TabNavigation="Local">
							<ScrollViewer VerticalScrollBarVisibility="Auto"
										  Margin="{TemplateBinding Padding}">
								<ContentPresenter x:Name="PART_SelectedContentHost"
												  ContentSource="SelectedContent"
												  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="TabStripPlacement"
								 Value="Bottom">
							<Setter Property="Grid.Row"
									TargetName="HeaderPanel"
									Value="1" />
							<Setter Property="Grid.Row"
									TargetName="ContentPanel"
									Value="0" />
							<Setter Property="Height"
									TargetName="RowDefinition0"
									Value="*" />
							<Setter Property="Height"
									TargetName="RowDefinition1"
									Value="Auto" />

						</Trigger>
						<Trigger Property="TabStripPlacement"
								 Value="Left">
							<Setter Property="Grid.Row"
									TargetName="HeaderPanel"
									Value="0" />
							<Setter Property="Grid.Row"
									TargetName="ContentPanel"
									Value="0" />
							<Setter Property="Grid.Column"
									TargetName="HeaderPanel"
									Value="0" />
							<Setter Property="Grid.Column"
									TargetName="ContentPanel"
									Value="1" />
							<Setter Property="Width"
									TargetName="ColumnDefinition0"
									Value="Auto" />
							<Setter Property="Width"
									TargetName="ColumnDefinition1"
									Value="*" />
							<Setter Property="Height"
									TargetName="RowDefinition0"
									Value="*" />
							<Setter Property="Height"
									TargetName="RowDefinition1"
									Value="0" />
						</Trigger>
						<Trigger Property="TabStripPlacement"
								 Value="Right">
							<Setter Property="Grid.Row"
									TargetName="HeaderPanel"
									Value="0" />
							<Setter Property="Grid.Row"
									TargetName="ContentPanel"
									Value="0" />
							<Setter Property="Grid.Column"
									TargetName="HeaderPanel"
									Value="1" />
							<Setter Property="Grid.Column"
									TargetName="ContentPanel"
									Value="0" />
							<Setter Property="Width"
									TargetName="ColumnDefinition0"
									Value="*" />
							<Setter Property="Width"
									TargetName="ColumnDefinition1"
									Value="Auto" />
							<Setter Property="Height"
									TargetName="RowDefinition0"
									Value="*" />
							<Setter Property="Height"
									TargetName="RowDefinition1"
									Value="0" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for TextBlocks-->
	<Style TargetType="{x:Type TextBlock}">
		<Setter Property="TextWrapping"
				Value="Wrap" />
	</Style>

	<!--Set properties for TextBoxes-->
	<Style TargetType="{x:Type TextBox}">
		<Setter Property="Background"
				Value="{DynamicResource CrystalBackgroundFill2}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource CrystalBorder2}" />
		<Setter Property="BorderThickness"
				Value="{DynamicResource CrystalBorderThickness2}" />
		<Setter Property="Margin"
				Value="1" />
		<Setter Property="Foreground"
				Value="Black" />
		<Setter Property="CaretBrush"
				Value="Black" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBoxBase}">
					<Border x:Name="Border"
							Opacity="0.8"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="True">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.5" />
								</VisualStateGroup.Transitions>
								<VisualState Name="Normal" />
								<VisualState Name="MouseOver">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity"
														 Storyboard.TargetName="Border"
														 To="0.925" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<ScrollViewer x:Name="PART_ContentHost"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="Background"
									TargetName="Border"
									Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
							<Setter Property="TextElement.Foreground"
									TargetName="Border"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
						<Trigger Property="IsFocused"
								 Value="True">
							<Setter Property="BorderBrush"
									TargetName="Border"
									Value="DarkGray" />
							<Setter Property="BorderThickness"
									TargetName="Border"
									Value="1" />
							<Setter Property="Opacity"
									TargetName="Border"
									Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for ToolTips-->
	<Style TargetType="{x:Type ToolTip}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolTip}">
					<Grid x:Name="MainGrid">
						<Border BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="0"
								Background="{TemplateBinding Background}" />
						<ContentPresenter Margin="7,3" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Foreground"
				Value="Black" />
		<Setter Property="BorderBrush"
				Value="Gray" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Background"
				Value="WhiteSmoke" />
	</Style>

	<!--Set properties for TreeViewItems-->
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke"
					 Color="DodgerBlue" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke"
					 Color="White" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Pressed.Stroke"
					 Color="DarkBlue" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Pressed.Fill"
					 Color="Transparent" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill"
					 Color="Transparent" />
	<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill"
					 Color="Transparent" />
	<SolidColorBrush x:Key="TreeViewItem.HoverBrush"
					 Color="#641E90FF" />
	<SolidColorBrush x:Key="TreeViewItem.SelectedBrush"
					 Color="#AA1E90FF" />
	<PathGeometry x:Key="TreeArrow"
				  Figures="M 1,1.5 L 4.5,5 L 8,1.5" />
	<Style x:Key="ExpandCollapseToggleStyle"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable"
				Value="False" />
		<Setter Property="Width"
				Value="Auto" />
		<Setter Property="Height"
				Value="Auto" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid>
						<Ellipse x:Name="Circle"
								 HorizontalAlignment="Center"
								 Height="19"
								 Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}"
								 Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
								 VerticalAlignment="Center"
								 Width="19" />
						<Path x:Name="ExpandPath"
							  Data="{StaticResource TreeArrow}"
							  StrokeThickness="2"
							  VerticalAlignment="Center"
							  HorizontalAlignment="Center"
							  Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked"
								 Value="True">
							<Setter Property="Data"
									TargetName="ExpandPath"
									Value="M 1,4.5 L 4.5,1 L 8,4.5" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter Property="Stroke"
									TargetName="ExpandPath"
									Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
							<Setter Property="Stroke"
									TargetName="Circle"
									Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
							<Setter Property="Fill"
									TargetName="Circle"
									Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="True">
							<Setter Property="Stroke"
									TargetName="ExpandPath"
									Value="{StaticResource TreeViewItem.TreeArrow.Pressed.Stroke}" />
							<Setter Property="Stroke"
									TargetName="Circle"
									Value="{StaticResource TreeViewItem.TreeArrow.Pressed.Stroke}" />
							<Setter Property="Fill"
									TargetName="Circle"
									Value="{StaticResource TreeViewItem.TreeArrow.Pressed.Fill}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type TreeViewItem}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Padding"
				Value="5,3,3,4" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="HorizontalContentAlignment"
				Value="Stretch" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition />
						</Grid.RowDefinitions>
						<Border x:Name="BgGrid"
								Grid.ColumnSpan="2"
								CornerRadius="10" />
						<ToggleButton x:Name="Expander"
									  Margin="3,0,0,0"
									  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
									  Style="{StaticResource ExpandCollapseToggleStyle}" />
						<Border x:Name="Bd"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								Grid.Column="1"
								Padding="{TemplateBinding Padding}"
								SnapsToDevicePixels="true">
							<ContentPresenter x:Name="PART_Header"
											  ContentSource="Header"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
						<ItemsPresenter x:Name="ItemsHost"
										Grid.Column="1"
										Grid.Row="1" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded"
								 Value="false">
							<Setter Property="Visibility"
									TargetName="ItemsHost"
									Value="Collapsed" />
						</Trigger>

						<Trigger Property="IsSelected"
								 Value="True">
							<Setter Property="Background"
									TargetName="BgGrid"
									Value="{StaticResource TreeViewItem.SelectedBrush}" />
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   SourceName="Bd"
										   Value="True" />
								<Condition Property="IsSelected"
										   Value="False" />
							</MultiTrigger.Conditions>
							<Setter Property="Background"
									TargetName="BgGrid"
									Value="{StaticResource TreeViewItem.HoverBrush}" />
						</MultiTrigger>

						<Trigger Property="HasItems"
								 Value="false">
							<Setter Property="Visibility"
									TargetName="Expander"
									Value="Hidden" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for TreeViews-->
	<SolidColorBrush x:Key="ListBorder"
					 Color="#828790" />
	<Style TargetType="{x:Type TreeView}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Padding"
				Value="1" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
				Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="ScrollViewer.PanningMode"
				Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeView}">
					<Border x:Name="Bd"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<ScrollViewer x:Name="_tv_scrollviewer_"
									  Background="{TemplateBinding Background}"
									  CanContentScroll="false"
									  Focusable="false"
									  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
									  Padding="{TemplateBinding Padding}"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
							<ItemsPresenter />
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Opacity"
									Value="0.2" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Set properties for windows-->
	<WindowChrome x:Key="CrystalChrome"
				  CaptionHeight="24"
				  GlassFrameThickness="0"
				  UseAeroCaptionButtons="False"
				  ResizeBorderThickness="8" />
	<Style x:Key="CrystalWindows"
		   TargetType="{x:Type Window}">
		<Setter Property="BorderBrush"
				Value="{StaticResource CrystalBorder}" />
	</Style>
</ResourceDictionary>